//SPDX-License-Identifier: Apache
pragma solidity ^0.8.0;

import "./Planet.sol";
import "./Items.sol";

struct PlanetData {
    address owner;
    uint lastUpdate;
}

abstract contract PlanetResource is Planet {

    // The Items contract.
    Items ItemsContract;

    // The kind of resource generated by this planet.
    Kind public kind;

    // The ressource count increase by this amount every block.
    uint8 public accrualRate;

    // Storage for all planets of the given type.
    mapping (uint => PlanetData) planets;

    constructor(Items _ItemsContract, uint8 _accrualRate) {
        ItemsContract = _ItemsContract;
        accrualRate = _accrualRate;
    }

    // Lets the frontend compute a planet ID from its coordinates.
    function getPlanetID(uint x, uint y) pure external returns (uint) {
        return x << 128 + y;
    }

    // Returns the x coordinate of the planet given its ID.
    function planetX(uint planetID) pure public returns (uint) {
        return planetID >> 128;
    }

    // Returns the y coordinate of the planet given its ID.
    function planetY(uint planetID) pure public returns (uint) {
        return (planetID << 128) >> 128;
    }

    // Return the block number at which the extractor was last updated.
    function lastUpdate(uint planetID) view external returns (uint) {
        // TODO validate that the given ID exists
        return planets[planetID].lastUpdate;
    }

    function build (address player, uint planetID) external {
        // TODO: validate that the given ID does contain a planet for the given resource
        // TODO: validate that a structure has not already been built on the given planet
        planets[planetID] = PlanetData(player, block.number);
    }

    function collect(address player, uint planetID) external {
        // TODO validate that there is an extractor on the given planet
        PlanetData storage data = planets[planetID];
        require(data.owner == player, "Extractor is not owned by player");
        uint elapsed = block.number - data.lastUpdate;
        uint amount = accrualRate * elapsed;
        data.lastUpdate = block.number;
        ItemsContract.mint(player, kind, amount, bytes(""));
    }
}
